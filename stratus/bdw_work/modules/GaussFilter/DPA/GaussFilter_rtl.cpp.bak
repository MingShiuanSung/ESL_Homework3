// Generated by stratus_hls 19.12-s100  (91710.131054)
// Tue Apr 12 14:52:35 2022
// from ../GaussFilter.cpp
#include "GaussFilter_rtl.h"

struct GaussFilter;
GaussFilter::GaussFilter(sc_module_name name) : sc_module(name) 
    ,i_clk("i_clk")
    ,i_rst("i_rst")
    ,i_rgb_busy("i_rgb_busy")
    ,i_rgb_vld("i_rgb_vld")
    ,i_rgb_data("i_rgb_data")
    ,o_result_busy("o_result_busy")
    ,o_result_vld("o_result_vld")
    ,o_result_data("o_result_data")
    ,o_result_m_req_m_prev_trig_req("o_result_m_req_m_prev_trig_req")
    ,GaussFilter_Xor_1Ux1U_1U_1_1_out1("GaussFilter_Xor_1Ux1U_1U_1_1_out1")
    ,o_result_m_unacked_req("o_result_m_unacked_req")
    ,GaussFilter_Or_1Ux1U_1U_4_2_out1("GaussFilter_Or_1Ux1U_1U_4_2_out1")
    ,GaussFilter_N_Muxb_1_2_16_4_4_out1("GaussFilter_N_Muxb_1_2_16_4_4_out1")
    ,i_rgb_m_unvalidated_req("i_rgb_m_unvalidated_req")
    ,GaussFilter_gen_busy_r_4_28_gen_busy_i_rgb_m_data_is_invalid_next("GaussFilter_gen_busy_r_4_28_gen_busy_i_rgb_m_data_is_invalid_next")
    ,GaussFilter_gen_busy_r_4_28_gdiv("GaussFilter_gen_busy_r_4_28_gdiv")
    ,GaussFilter_gen_busy_r_4_28_gnew_req("GaussFilter_gen_busy_r_4_28_gnew_req")
    ,global_state_next("global_state_next")
    ,GaussFilter_Add2Mul2s32s32s32_4_25_in3("GaussFilter_Add2Mul2s32s32s32_4_25_in3")
    ,GaussFilter_N_Mux_32_2_27_4_23_out1("GaussFilter_N_Mux_32_2_27_4_23_out1")
    ,GaussFilter_N_Mux_32_2_27_4_23_ctrl1("GaussFilter_N_Mux_32_2_27_4_23_ctrl1")
    ,GaussFilter_N_Mux_32_2_27_4_23_in2("GaussFilter_N_Mux_32_2_27_4_23_in2")
    ,GaussFilter_N_Mux_32_2_27_4_23_in3("GaussFilter_N_Mux_32_2_27_4_23_in3")
    ,gs_ctrl4("gs_ctrl4")
    ,GaussFilter_Add_32Ux32U_32U_4_18_out1("GaussFilter_Add_32Ux32U_32U_4_18_out1")
    ,GaussFilter_Mul_32Sx8U_32S_4_17_out1("GaussFilter_Mul_32Sx8U_32S_4_17_out1")
    ,GaussFilter_N_Mux_32_2_27_4_15_out1("GaussFilter_N_Mux_32_2_27_4_15_out1")
    ,GaussFilter_Add2u2Mul2i3Add2u2u2_4_14_out1("GaussFilter_Add2u2Mul2i3Add2u2u2_4_14_out1")
    ,GaussFilter_N_Mux_2_2_26_4_13_out1("GaussFilter_N_Mux_2_2_26_4_13_out1")
    ,GaussFilter_N_Mux_2_2_26_4_13_ctrl1("GaussFilter_N_Mux_2_2_26_4_13_ctrl1")
    ,gs_ctrl3("gs_ctrl3")
    ,GaussFilter_Add3u8u8u8_4_9_out1("GaussFilter_Add3u8u8u8_4_9_out1")
    ,GaussFilter_Add3u8u8u8_4_9_in1("GaussFilter_Add3u8u8u8_4_9_in1")
    ,GaussFilter_Add3u8u8u8_4_9_in2("GaussFilter_Add3u8u8u8_4_9_in2")
    ,GaussFilter_Add2i1u1_4_6_in1("GaussFilter_Add2i1u1_4_6_in1")
    ,gs_ctrl0("gs_ctrl0")
    ,s_reg_27_slice("s_reg_27_slice")
    ,GaussFilter_Add_2Ux1U_2U_4_12_out1("GaussFilter_Add_2Ux1U_2U_4_12_out1")
    ,GaussFilter_Add_2Ux1U_2U_4_11_out1("GaussFilter_Add_2Ux1U_2U_4_11_out1")
    ,GaussFilter_Div_8U_15_4_10_out1("GaussFilter_Div_8U_15_4_10_out1")
    ,s_reg_24("s_reg_24")
    ,s_reg_26("s_reg_26")
    ,s_reg_23("s_reg_23")
    ,s_reg_25("s_reg_25")
    ,s_reg_22("s_reg_22")
    ,GaussFilter_N_Mux_32_2_27_4_20_out1("GaussFilter_N_Mux_32_2_27_4_20_out1")
    ,GaussFilter_N_Mux_32_2_27_4_8_out1("GaussFilter_N_Mux_32_2_27_4_8_out1")
    ,s_reg_21("s_reg_21")
    ,GaussFilter_N_Mux_32_2_27_4_19_out1("GaussFilter_N_Mux_32_2_27_4_19_out1")
    ,GaussFilter_N_Mux_32_2_24_4_7_out1("GaussFilter_N_Mux_32_2_24_4_7_out1")
    ,s_reg_20("s_reg_20")
    ,GaussFilter_gen_busy_r_4_28_out1("GaussFilter_gen_busy_r_4_28_out1")
    ,GaussFilter_And_1Ux1U_1U_4_26_out1("GaussFilter_And_1Ux1U_1U_4_26_out1")
    ,GaussFilter_Not_1U_1U_1_3_out1("GaussFilter_Not_1U_1U_1_3_out1")
    ,GaussFilter_Add2i1u1_4_24_out1("GaussFilter_Add2i1u1_4_24_out1")
    ,o_result_m_req_m_trig_req("o_result_m_req_m_trig_req")
    ,GaussFilter_Lti3u2_4_21_out1("GaussFilter_Lti3u2_4_21_out1")
    ,GaussFilter_Lti3u2_4_22_out1("GaussFilter_Lti3u2_4_22_out1")
    ,GaussFilter_Add2i1u1_4_16_out1("GaussFilter_Add2i1u1_4_16_out1")
    ,GaussFilter_Add2i1u1_4_6_out1("GaussFilter_Add2i1u1_4_6_out1")
    ,global_state("global_state")
    ,i_rgb_m_busy_req_0("i_rgb_m_busy_req_0")
    ,GaussFilter_Add2Mul2s32s32s32_4_25_out1("GaussFilter_Add2Mul2s32s32s32_4_25_out1")
    ,stall0("stall0")
    ,mask_in1("mask_in1")
    ,mask_out1("mask_out1")
{
  mask = new GaussFilter_ROM_18X32_mask("mask");
  mask->in1(mask_in1);
  mask->out1(mask_out1);
  mask->clk(i_clk);

  SC_METHOD(drive_o_result_data);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_i_rgb_m_busy_req_0);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_o_result_m_req_m_trig_req);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_stall0);
  sensitive << ( global_state );
  sensitive << ( GaussFilter_gen_busy_r_4_28_out1 );
  sensitive << ( GaussFilter_And_1Ux1U_1U_4_26_out1 );

  SC_METHOD(drive_s_reg_20);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_21);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_22);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_23);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_24);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_25);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_26);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_27_slice);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_GaussFilter_Add2i1u1_4_6_in1);
  sensitive << ( gs_ctrl0 );
  sensitive << ( s_reg_23 );

  SC_METHOD(GaussFilter_Add2i1u1_4_6);
  sensitive << ( GaussFilter_Add2i1u1_4_6_in1 );

  SC_METHOD(GaussFilter_N_Mux_32_2_24_4_7);
  sensitive << ( GaussFilter_Add2i1u1_4_6_in1 );
  sensitive << ( s_reg_20 );

  SC_METHOD(GaussFilter_N_Mux_32_2_27_4_8);
  sensitive << ( GaussFilter_Add2i1u1_4_6_in1 );
  sensitive << ( s_reg_21 );

  SC_METHOD(drive_GaussFilter_Add3u8u8u8_4_9_in2);
  sensitive << ( i_rgb_data );

  SC_METHOD(drive_GaussFilter_Add3u8u8u8_4_9_in1);
  sensitive << ( i_rgb_data );

  SC_METHOD(GaussFilter_Add3u8u8u8_4_9);
  sensitive << ( GaussFilter_Add3u8u8u8_4_9_in1 );
  sensitive << ( GaussFilter_Add3u8u8u8_4_9_in2 );
  sensitive << ( i_rgb_data );

  SC_METHOD(GaussFilter_Div_8U_15_4_10);
  sensitive << ( GaussFilter_Add3u8u8u8_4_9_out1 );

  SC_METHOD(GaussFilter_Add_2Ux1U_2U_4_11);
  sensitive << ( s_reg_22 );

  SC_METHOD(GaussFilter_Add_2Ux1U_2U_4_12);
  sensitive << ( s_reg_23 );

  SC_METHOD(drive_GaussFilter_N_Mux_2_2_26_4_13_ctrl1);
  sensitive << ( gs_ctrl3 );
  sensitive << ( GaussFilter_Add2i1u1_4_16_out1 );

  SC_METHOD(GaussFilter_N_Mux_2_2_26_4_13);
  sensitive << ( GaussFilter_N_Mux_2_2_26_4_13_ctrl1 );

  SC_METHOD(GaussFilter_Add2u2Mul2i3Add2u2u2_4_14);
  sensitive << ( s_reg_22 );
  sensitive << ( s_reg_23 );
  sensitive << ( GaussFilter_N_Mux_2_2_26_4_13_out1 );

  SC_METHOD(GaussFilter_N_Mux_32_2_27_4_15);
  sensitive << ( s_reg_27_slice );
  sensitive << ( s_reg_20 );
  sensitive << ( s_reg_21 );

  SC_METHOD(GaussFilter_Add2i1u1_4_16);
  sensitive << ( s_reg_27_slice );

  SC_METHOD(drive_mask_in1);
  sensitive << ( GaussFilter_Add2u2Mul2i3Add2u2u2_4_14_out1 );

  SC_METHOD(GaussFilter_Mul_32Sx8U_32S_4_17);
  sensitive << ( s_reg_24 );
  sensitive << ( mask_out1 );

  SC_METHOD(GaussFilter_Add_32Ux32U_32U_4_18);
  sensitive << ( GaussFilter_Mul_32Sx8U_32S_4_17_out1 );
  sensitive << ( GaussFilter_N_Mux_32_2_27_4_15_out1 );

  SC_METHOD(GaussFilter_N_Mux_32_2_27_4_19);
  sensitive << ( s_reg_27_slice );
  sensitive << ( GaussFilter_Add_32Ux32U_32U_4_18_out1 );
  sensitive << ( s_reg_20 );

  SC_METHOD(GaussFilter_N_Mux_32_2_27_4_20);
  sensitive << ( s_reg_27_slice );
  sensitive << ( s_reg_21 );
  sensitive << ( GaussFilter_Add_32Ux32U_32U_4_18_out1 );

  SC_METHOD(GaussFilter_Lti3u2_4_21);
  sensitive << ( s_reg_25 );

  SC_METHOD(GaussFilter_Lti3u2_4_22);
  sensitive << ( s_reg_26 );

  SC_METHOD(drive_GaussFilter_N_Mux_32_2_27_4_23_in3);
  sensitive << ( gs_ctrl4 );
  sensitive << ( s_reg_21 );
  sensitive << ( GaussFilter_N_Mux_32_2_27_4_20_out1 );

  SC_METHOD(drive_GaussFilter_N_Mux_32_2_27_4_23_in2);
  sensitive << ( gs_ctrl4 );
  sensitive << ( s_reg_20 );
  sensitive << ( GaussFilter_N_Mux_32_2_27_4_19_out1 );

  SC_METHOD(drive_GaussFilter_N_Mux_32_2_27_4_23_ctrl1);
  sensitive << ( gs_ctrl4 );
  sensitive << ( s_reg_22 );

  SC_METHOD(GaussFilter_N_Mux_32_2_27_4_23);
  sensitive << ( GaussFilter_N_Mux_32_2_27_4_23_ctrl1 );
  sensitive << ( GaussFilter_N_Mux_32_2_27_4_23_in2 );
  sensitive << ( GaussFilter_N_Mux_32_2_27_4_23_in3 );

  SC_METHOD(GaussFilter_Add2i1u1_4_24);
  sensitive << ( GaussFilter_N_Mux_32_2_27_4_23_ctrl1 );

  SC_METHOD(drive_GaussFilter_Add2Mul2s32s32s32_4_25_in3);
  sensitive << ( gs_ctrl4 );
  sensitive << ( o_result_data );

  SC_METHOD(GaussFilter_Add2Mul2s32s32s32_4_25);
  sensitive << ( GaussFilter_N_Mux_32_2_27_4_23_out1 );
  sensitive << ( GaussFilter_Add2Mul2s32s32s32_4_25_in3 );

  SC_METHOD(drive_global_state);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_global_state_next);
  sensitive << ( global_state );
  sensitive << ( GaussFilter_Add2i1u1_4_6_out1 );
  sensitive << ( GaussFilter_Add2i1u1_4_16_out1 );
  sensitive << ( GaussFilter_Lti3u2_4_22_out1 );
  sensitive << ( GaussFilter_Lti3u2_4_21_out1 );
  sensitive << ( GaussFilter_Add2i1u1_4_24_out1 );

  SC_METHOD(drive_gs_ctrl0);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl3);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl4);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_i_rgb_busy);
  sensitive << ( GaussFilter_gen_busy_r_4_28_out1 );

  SC_METHOD(GaussFilter_gen_busy_r_4_28_p8);
  sensitive << ( 
  GaussFilter_gen_busy_r_4_28_gen_busy_i_rgb_m_data_is_invalid_next );
  sensitive << ( GaussFilter_gen_busy_r_4_28_gdiv );
  sensitive << ( GaussFilter_gen_busy_r_4_28_gnew_req );

  SC_METHOD(GaussFilter_gen_busy_r_4_28_p7);
  sensitive << ( GaussFilter_gen_busy_r_4_28_gdiv );

  SC_METHOD(GaussFilter_gen_busy_r_4_28_p6);
  sensitive << ( GaussFilter_gen_busy_r_4_28_gnew_req );
  sensitive << ( i_rgb_vld );

  SC_METHOD(GaussFilter_gen_busy_r_4_28_p5);
  sensitive << ( i_rgb_vld );
  sensitive << ( i_rgb_m_unvalidated_req );
  sensitive << ( i_rgb_m_busy_req_0 );

  SC_METHOD(drive_i_rgb_m_unvalidated_req);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(GaussFilter_N_Muxb_1_2_16_4_4);
  sensitive << ( i_rgb_m_busy_req_0 );
  sensitive << ( i_rgb_m_unvalidated_req );
  sensitive << ( i_rgb_vld );

  SC_METHOD(drive_o_result_vld);
  sensitive << ( GaussFilter_Or_1Ux1U_1U_4_2_out1 );

  SC_METHOD(GaussFilter_Or_1Ux1U_1U_4_2);
  sensitive << ( GaussFilter_Xor_1Ux1U_1U_1_1_out1 );
  sensitive << ( o_result_m_unacked_req );

  SC_METHOD(drive_o_result_m_unacked_req);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(GaussFilter_And_1Ux1U_1U_4_26);
  sensitive << ( o_result_vld );
  sensitive << ( o_result_busy );

  SC_METHOD(GaussFilter_Xor_1Ux1U_1U_1_1);
  sensitive << ( o_result_m_req_m_prev_trig_req );
  sensitive << ( o_result_m_req_m_trig_req );

  SC_METHOD(drive_o_result_m_req_m_prev_trig_req);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(GaussFilter_Not_1U_1U_1_3);
  sensitive << ( o_result_m_req_m_trig_req );

}
// resource: regr_en_32
void GaussFilter::drive_o_result_data(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    o_result_data = (sc_uint<32> ) (GaussFilter_Add2Mul2s32s32s32_4_25_out1
                    .read());
    break;
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_ss_1
void GaussFilter::drive_i_rgb_m_busy_req_0(){
  if ( (i_rst.read() == 0ULL) ) {
    i_rgb_m_busy_req_0 = 1ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<3>)(global_state.read()) ) {
      case 0ULL: case 1ULL: case 7ULL: 
        if ( GaussFilter_Add2i1u1_4_6_out1.read().range(1,1) ) {
          i_rgb_m_busy_req_0 = 0ULL;
        } 
        break;
      case 2ULL: 
        i_rgb_m_busy_req_0 = 1ULL;
        break;
      case 4ULL: 
        if ( (2ULL == GaussFilter_Add2i1u1_4_16_out1.read()) ) {
          if ( GaussFilter_Lti3u2_4_22_out1.read() ) {
            i_rgb_m_busy_req_0 = 0ULL;
          } else {
            if ( GaussFilter_Lti3u2_4_21_out1.read() ) {
              i_rgb_m_busy_req_0 = 0ULL;
            } 
          }
        } 
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_1
void GaussFilter::drive_o_result_m_req_m_trig_req(){
  if ( (i_rst.read() == 0ULL) ) {
    o_result_m_req_m_trig_req = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<3>)(global_state.read()) ) {
      case 4ULL: 
        if ( ((2ULL == GaussFilter_Add2i1u1_4_16_out1.read()) && (!
             GaussFilter_Lti3u2_4_22_out1.read() && (!
             GaussFilter_Lti3u2_4_21_out1.read() && (2ULL == 
             GaussFilter_Add2i1u1_4_24_out1.read())))) ) {
          o_result_m_req_m_trig_req = (sc_uint<1> ) (
                                      GaussFilter_Not_1U_1U_1_3_out1.read());
        } 
        break;
      case 5ULL: 
        if ( (2ULL == GaussFilter_Add2i1u1_4_24_out1.read()) ) {
          o_result_m_req_m_trig_req = (sc_uint<1> ) (
                                      GaussFilter_Not_1U_1U_1_3_out1.read());
        } 
        break;
      }
      break;
    }
  }
}
// resource: mux_1bx3i1c
void GaussFilter::drive_stall0(){
  switch( (sc_uint<3>)(global_state.read()) ) {
  default:
    stall0 = 0ULL;
    break;
  case 2ULL: 
    stall0 = (sc_uint<1> )GaussFilter_gen_busy_r_4_28_out1.read();
    break;
  case 6ULL: 
    stall0 = GaussFilter_And_1Ux1U_1U_4_26_out1.read();
    break;
  }
}
// resource: mux_32bx2i0c
// resource: regr_en_sc_32
void GaussFilter::drive_s_reg_20(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_20 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<3>)(global_state.read()) ) {
      case 0ULL: case 1ULL: case 7ULL: 
        s_reg_20 = (sc_uint<32> ) (GaussFilter_N_Mux_32_2_24_4_7_out1.read());
        break;
      case 4ULL: 
        s_reg_20 = (sc_uint<32> ) (GaussFilter_N_Mux_32_2_27_4_19_out1.read());
        break;
      }
      break;
    }
  }
}
// resource: mux_32bx2i0c
// resource: regr_en_sc_32
void GaussFilter::drive_s_reg_21(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_21 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<3>)(global_state.read()) ) {
      case 0ULL: case 1ULL: case 7ULL: 
        s_reg_21 = (sc_uint<32> ) (GaussFilter_N_Mux_32_2_27_4_8_out1.read());
        break;
      case 4ULL: 
        s_reg_21 = (sc_uint<32> ) (GaussFilter_N_Mux_32_2_27_4_20_out1.read());
        break;
      }
      break;
    }
  }
}
// resource: mux_2bx3i1c
// resource: regr_en_2
void GaussFilter::drive_s_reg_22(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<3>)(global_state.read()) ) {
    case 0ULL: case 7ULL: 
      s_reg_22 = 0ULL;
      break;
    case 4ULL: 
      if ( (2ULL == GaussFilter_Add2i1u1_4_16_out1.read()) ) {
        if ( GaussFilter_Lti3u2_4_22_out1.read() );
        else {
          if ( GaussFilter_Lti3u2_4_21_out1.read() ) {
            s_reg_22 = s_reg_25.read();
          } else {
            if ( (2ULL != GaussFilter_Add2i1u1_4_24_out1.read()) ) {
              s_reg_22 = (sc_uint<2> ) (GaussFilter_Add2i1u1_4_24_out1.read());
            } 
          }
        }
      } 
      break;
    case 5ULL: 
      if ( (2ULL != GaussFilter_Add2i1u1_4_24_out1.read()) ) {
        s_reg_22 = (sc_uint<2> ) (GaussFilter_Add2i1u1_4_24_out1.read());
      } 
      break;
    }
    break;
  }
}
// resource: mux_2bx3i1c
// resource: regr_en_2
void GaussFilter::drive_s_reg_23(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<3>)(global_state.read()) ) {
    case 0ULL: case 1ULL: case 7ULL: 
      if ( GaussFilter_Add2i1u1_4_6_out1.read().range(1,1) ) {
        s_reg_23 = 0ULL;
      } else {
        s_reg_23 = (sc_uint<2> ) (GaussFilter_Add2i1u1_4_6_out1.read());
      }
      break;
    case 4ULL: 
      if ( (2ULL == GaussFilter_Add2i1u1_4_16_out1.read()) ) {
        if ( GaussFilter_Lti3u2_4_22_out1.read() ) {
          s_reg_23 = s_reg_26.read();
        } else {
          s_reg_23 = 0ULL;
        }
      } 
      break;
    }
    break;
  }
}
// resource: regr_en_8
void GaussFilter::drive_s_reg_24(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<3>)(global_state.read()) ) {
    case 2ULL: 
      s_reg_24 = GaussFilter_Div_8U_15_4_10_out1.read();
      break;
    }
    break;
  }
}
// resource: regr_en_2
void GaussFilter::drive_s_reg_25(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<3>)(global_state.read()) ) {
    case 3ULL: 
      s_reg_25 = (sc_uint<2> ) (GaussFilter_Add_2Ux1U_2U_4_11_out1.read());
      break;
    case 4ULL: 
      if ( (2ULL != GaussFilter_Add2i1u1_4_16_out1.read()) ) {
        s_reg_25 = (sc_uint<2> ) (GaussFilter_Add_2Ux1U_2U_4_11_out1.read());
      } 
      break;
    }
    break;
  }
}
// resource: regr_en_2
void GaussFilter::drive_s_reg_26(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<3>)(global_state.read()) ) {
    case 3ULL: 
      s_reg_26 = (sc_uint<2> ) (GaussFilter_Add_2Ux1U_2U_4_12_out1.read());
      break;
    case 4ULL: 
      if ( (2ULL != GaussFilter_Add2i1u1_4_16_out1.read()) ) {
        s_reg_26 = (sc_uint<2> ) (GaussFilter_Add_2Ux1U_2U_4_12_out1.read());
      } 
      break;
    }
    break;
  }
}
// resource: mux_1bx2i1c
// resource: regr_en_1
void GaussFilter::drive_s_reg_27_slice(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<3>)(global_state.read()) ) {
    case 3ULL: 
      s_reg_27_slice = 0ULL;
      break;
    case 4ULL: 
      if ( (2ULL != GaussFilter_Add2i1u1_4_16_out1.read()) ) {
        s_reg_27_slice = (sc_uint<1> )GaussFilter_Add2i1u1_4_16_out1.read();
      } 
      break;
    }
    break;
  }
}
// resource: mux_1bx2i1c
void GaussFilter::drive_GaussFilter_Add2i1u1_4_6_in1(){
  if ( gs_ctrl0.read() ) {
    GaussFilter_Add2i1u1_4_6_in1 = (sc_uint<1> )s_reg_23.read();
  } else {
    GaussFilter_Add2i1u1_4_6_in1 = 0ULL;
  }
}
// resource: GaussFilter_Add2i1u1_4  instance: GaussFilter_Add2i1u1_4_6
void GaussFilter::GaussFilter_Add2i1u1_4_6(){
  GaussFilter_Add2i1u1_4_6_out1 = (/*cliff*/sc_uint<32>)(
                                  GaussFilter_Add2i1u1_4_6_in1.read() + 1ULL);
}
// resource: GaussFilter_N_Mux_32_2_24_4
void GaussFilter::GaussFilter_N_Mux_32_2_24_4_7(){
  if ( GaussFilter_Add2i1u1_4_6_in1.read() ) {
    GaussFilter_N_Mux_32_2_24_4_7_out1 = 0ULL;
  } else {
    GaussFilter_N_Mux_32_2_24_4_7_out1 = (sc_uint<32> ) (s_reg_20.read());
  }
}
// resource: GaussFilter_N_Mux_32_2_27_4
void GaussFilter::GaussFilter_N_Mux_32_2_27_4_8(){
  if ( GaussFilter_Add2i1u1_4_6_in1.read() ) {
    GaussFilter_N_Mux_32_2_27_4_8_out1 = (sc_uint<32> ) (s_reg_21.read());
  } else {
    GaussFilter_N_Mux_32_2_27_4_8_out1 = 0ULL;
  }
}
void GaussFilter::drive_GaussFilter_Add3u8u8u8_4_9_in2(){
  GaussFilter_Add3u8u8u8_4_9_in2 = (sc_uint<8> ) (i_rgb_data.read().range(15,8))
  ;
}
void GaussFilter::drive_GaussFilter_Add3u8u8u8_4_9_in1(){
  GaussFilter_Add3u8u8u8_4_9_in1 = (sc_uint<8> ) (i_rgb_data.read().range(23,16)
                                   );
}
// resource: GaussFilter_Add3u8u8u8_4  instance: GaussFilter_Add3u8u8u8_4_9
void GaussFilter::GaussFilter_Add3u8u8u8_4_9(){
  GaussFilter_Add3u8u8u8_4_9_out1 = (( ((sc_uint<8> )i_rgb_data.read() + 
                                    GaussFilter_Add3u8u8u8_4_9_in2.read()) ) + 
                                    GaussFilter_Add3u8u8u8_4_9_in1.read());
}
// resource: GaussFilter_Div_8U_15_4  instance: GaussFilter_Div_8U_15_4_10
void GaussFilter::GaussFilter_Div_8U_15_4_10(){
  GaussFilter_Div_8U_15_4_10_out1 = ((sc_uint<2> )3ULL == 0 ? ((sc_uint<8> 
                                    ) -1) : (sc_uint<8> ) (
                                    GaussFilter_Add3u8u8u8_4_9_out1.read() / (
                                    sc_uint<2> )3ULL));
}
// resource: GaussFilter_Add_2Ux1U_2U_4  instance: GaussFilter_Add_2Ux1U_2U_4_11
void GaussFilter::GaussFilter_Add_2Ux1U_2U_4_11(){
  GaussFilter_Add_2Ux1U_2U_4_11_out1 = (/*cliff*/sc_uint<32>)((sc_uint<2> )
                                       s_reg_22.read() + 1ULL);
}
// resource: GaussFilter_Add_2Ux1U_2U_4  instance: GaussFilter_Add_2Ux1U_2U_4_12
void GaussFilter::GaussFilter_Add_2Ux1U_2U_4_12(){
  GaussFilter_Add_2Ux1U_2U_4_12_out1 = (/*cliff*/sc_uint<32>)((sc_uint<2> )
                                       s_reg_23.read() + 1ULL);
}
// resource: mux_1bx2i1c
void GaussFilter::drive_GaussFilter_N_Mux_2_2_26_4_13_ctrl1(){
  if ( gs_ctrl3.read() ) {
    GaussFilter_N_Mux_2_2_26_4_13_ctrl1 = (sc_uint<1> )
                                          GaussFilter_Add2i1u1_4_16_out1.read();
  } else {
    GaussFilter_N_Mux_2_2_26_4_13_ctrl1 = 0ULL;
  }
}
// resource: GaussFilter_N_Mux_2_2_26_4
void GaussFilter::GaussFilter_N_Mux_2_2_26_4_13(){
  if ( GaussFilter_N_Mux_2_2_26_4_13_ctrl1.read() ) {
    GaussFilter_N_Mux_2_2_26_4_13_out1 = 3ULL;
  } else {
    GaussFilter_N_Mux_2_2_26_4_13_out1 = 0ULL;
  }
}
// resource: GaussFilter_Add2u2Mul2i3Add2u2u2_4  instance: GaussFilter_Add2u2Mul2i3Add2u2u2_4_14
void GaussFilter::GaussFilter_Add2u2Mul2i3Add2u2u2_4_14(){
  GaussFilter_Add2u2Mul2i3Add2u2u2_4_14_out1 = (( (GaussFilter_N_Mux_2_2_26_4_13_out1
                                               .read() + s_reg_23.read()) ) * 
                                               3ULL + s_reg_22.read());
}
// resource: GaussFilter_N_Mux_32_2_27_4
void GaussFilter::GaussFilter_N_Mux_32_2_27_4_15(){
  if ( s_reg_27_slice.read() ) {
    GaussFilter_N_Mux_32_2_27_4_15_out1 = (sc_uint<32> ) (s_reg_20.read());
  } else {
    GaussFilter_N_Mux_32_2_27_4_15_out1 = (sc_uint<32> ) (s_reg_21.read());
  }
}
// resource: GaussFilter_Add2i1u1_4  instance: GaussFilter_Add2i1u1_4_16
void GaussFilter::GaussFilter_Add2i1u1_4_16(){
  GaussFilter_Add2i1u1_4_16_out1 = (/*cliff*/sc_uint<32>)(s_reg_27_slice.read()
                                    + 1ULL);
}
void GaussFilter::drive_mask_in1(){
  mask_in1 = GaussFilter_Add2u2Mul2i3Add2u2u2_4_14_out1.read();
}
// resource: GaussFilter_Mul_32Sx8U_32S_4  instance: GaussFilter_Mul_32Sx8U_32S_4_17
void GaussFilter::GaussFilter_Mul_32Sx8U_32S_4_17(){
  GaussFilter_Mul_32Sx8U_32S_4_17_out1 = (/*cliff*/sc_int<32>)(sc_int<32> )
                                         mask_out1.read() * (sc_uint<8> )
                                         s_reg_24.read();
}
// resource: GaussFilter_Add_32Ux32U_32U_4  instance: GaussFilter_Add_32Ux32U_32U_4_18
void GaussFilter::GaussFilter_Add_32Ux32U_32U_4_18(){
  GaussFilter_Add_32Ux32U_32U_4_18_out1 = (/*cliff*/sc_uint<32>)(
                                          GaussFilter_N_Mux_32_2_27_4_15_out1
                                          .read() + (sc_uint<32> )
                                          GaussFilter_Mul_32Sx8U_32S_4_17_out1
                                          .read());
}
// resource: GaussFilter_N_Mux_32_2_27_4
void GaussFilter::GaussFilter_N_Mux_32_2_27_4_19(){
  if ( s_reg_27_slice.read() ) {
    GaussFilter_N_Mux_32_2_27_4_19_out1 = GaussFilter_Add_32Ux32U_32U_4_18_out1
                                          .read();
  } else {
    GaussFilter_N_Mux_32_2_27_4_19_out1 = (sc_uint<32> ) (s_reg_20.read());
  }
}
// resource: GaussFilter_N_Mux_32_2_27_4
void GaussFilter::GaussFilter_N_Mux_32_2_27_4_20(){
  if ( s_reg_27_slice.read() ) {
    GaussFilter_N_Mux_32_2_27_4_20_out1 = (sc_uint<32> ) (s_reg_21.read());
  } else {
    GaussFilter_N_Mux_32_2_27_4_20_out1 = GaussFilter_Add_32Ux32U_32U_4_18_out1
                                          .read();
  }
}
// resource: GaussFilter_Lti3u2_4  instance: GaussFilter_Lti3u2_4_21
void GaussFilter::GaussFilter_Lti3u2_4_21(){
  GaussFilter_Lti3u2_4_21_out1 = (/*imp*/sc_uint<1>)((sc_uint<2> )s_reg_25
                                 .read() < (sc_uint<2> )3ULL);
}
// resource: GaussFilter_Lti3u2_4  instance: GaussFilter_Lti3u2_4_22
void GaussFilter::GaussFilter_Lti3u2_4_22(){
  GaussFilter_Lti3u2_4_22_out1 = (/*imp*/sc_uint<1>)((sc_uint<2> )s_reg_26
                                 .read() < (sc_uint<2> )3ULL);
}
// resource: mux_32bx2i0c
void GaussFilter::drive_GaussFilter_N_Mux_32_2_27_4_23_in3(){
  if ( gs_ctrl4.read() ) {
    GaussFilter_N_Mux_32_2_27_4_23_in3 = (sc_int<32> ) (s_reg_21.read());
  } else {
    GaussFilter_N_Mux_32_2_27_4_23_in3 = (sc_int<32> ) (
                                         GaussFilter_N_Mux_32_2_27_4_20_out1
                                         .read());
  }
}
// resource: mux_32bx2i0c
void GaussFilter::drive_GaussFilter_N_Mux_32_2_27_4_23_in2(){
  if ( gs_ctrl4.read() ) {
    GaussFilter_N_Mux_32_2_27_4_23_in2 = (sc_int<32> ) (s_reg_20.read());
  } else {
    GaussFilter_N_Mux_32_2_27_4_23_in2 = (sc_int<32> ) (
                                         GaussFilter_N_Mux_32_2_27_4_19_out1
                                         .read());
  }
}
// resource: mux_1bx2i1c
void GaussFilter::drive_GaussFilter_N_Mux_32_2_27_4_23_ctrl1(){
  if ( gs_ctrl4.read() ) {
    GaussFilter_N_Mux_32_2_27_4_23_ctrl1 = (sc_uint<1> )s_reg_22.read();
  } else {
    GaussFilter_N_Mux_32_2_27_4_23_ctrl1 = 0ULL;
  }
}
// resource: GaussFilter_N_Mux_32_2_27_4
void GaussFilter::GaussFilter_N_Mux_32_2_27_4_23(){
  if ( GaussFilter_N_Mux_32_2_27_4_23_ctrl1.read() ) {
    GaussFilter_N_Mux_32_2_27_4_23_out1 = (sc_uint<32> ) (
                                          GaussFilter_N_Mux_32_2_27_4_23_in2
                                          .read());
  } else {
    GaussFilter_N_Mux_32_2_27_4_23_out1 = (sc_uint<32> ) (
                                          GaussFilter_N_Mux_32_2_27_4_23_in3
                                          .read());
  }
}
// resource: GaussFilter_Add2i1u1_4  instance: GaussFilter_Add2i1u1_4_24
void GaussFilter::GaussFilter_Add2i1u1_4_24(){
  GaussFilter_Add2i1u1_4_24_out1 = (/*cliff*/sc_uint<32>)(
                                   GaussFilter_N_Mux_32_2_27_4_23_ctrl1.read()
                                    + 1ULL);
}
// resource: mux_32bx2i1c
void GaussFilter::drive_GaussFilter_Add2Mul2s32s32s32_4_25_in3(){
  if ( gs_ctrl4.read() ) {
    GaussFilter_Add2Mul2s32s32s32_4_25_in3 = (sc_int<32> ) (o_result_data.read()
                                             );
  } else {
    GaussFilter_Add2Mul2s32s32s32_4_25_in3 = 0LL;
  }
}
// resource: GaussFilter_Add2Mul2s32s32s32_4  instance: GaussFilter_Add2Mul2s32s32s32_4_25
void GaussFilter::GaussFilter_Add2Mul2s32s32s32_4_25(){
  GaussFilter_Add2Mul2s32s32s32_4_25_out1 = (/*cliff*/sc_int<32>)(GaussFilter_Add2Mul2s32s32s32_4_25_in3
                                            .read() + (/*cliff*/sc_int<32>)(
                                            sc_int<32> )
                                            GaussFilter_N_Mux_32_2_27_4_23_out1
                                            .read() * (sc_int<32> )
                                            GaussFilter_N_Mux_32_2_27_4_23_out1
                                            .read());
}
// resource: regr_en_sc_3
void GaussFilter::drive_global_state(){
  if ( (i_rst.read() == 0ULL) ) {
    global_state = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      global_state = global_state_next.read();
      break;
    }
  }
}
// resource: mux_3bx6i5c
void GaussFilter::drive_global_state_next(){
  switch( (sc_uint<3>)(global_state.read()) ) {
  default:
    global_state_next = (global_state.read() + 1ULL);
    break;
  case 0ULL: case 1ULL: case 7ULL: 
    if ( GaussFilter_Add2i1u1_4_6_out1.read().range(1,1) ) {
      global_state_next = 2ULL;
    } else {
      global_state_next = 1ULL;
    }
    break;
  case 4ULL: 
    switch( (sc_uint<2>)(GaussFilter_Add2i1u1_4_16_out1.read()) ) {
    default:
      global_state_next = 4ULL;
      break;
    case 2ULL: 
      if ( GaussFilter_Lti3u2_4_22_out1.read() ) {
        global_state_next = 2ULL;
      } else {
        if ( GaussFilter_Lti3u2_4_21_out1.read() ) {
          global_state_next = 2ULL;
        } else {
          switch( (sc_uint<2>)(GaussFilter_Add2i1u1_4_24_out1.read()) ) {
          default:
            global_state_next = (global_state.read() + 1ULL);
            break;
          case 2ULL: 
            global_state_next = 6ULL;
            break;
          }
        }
      }
      break;
    }
    break;
  case 5ULL: 
    switch( (sc_uint<2>)(GaussFilter_Add2i1u1_4_24_out1.read()) ) {
    default:
      global_state_next = 5ULL;
      break;
    case 2ULL: 
      global_state_next = (global_state.read() + 1ULL);
      break;
    }
    break;
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_sc_1
void GaussFilter::drive_gs_ctrl0(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl0 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<3>)(global_state_next.read()) ) {
      default:
        gs_ctrl0 = 0ULL;
        break;
      case 1ULL: 
        gs_ctrl0 = 1ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_sc_1
void GaussFilter::drive_gs_ctrl3(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl3 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<3>)(global_state_next.read()) ) {
      default:
        gs_ctrl3 = 0ULL;
        break;
      case 4ULL: 
        gs_ctrl3 = 1ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_sc_1
void GaussFilter::drive_gs_ctrl4(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl4 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<3>)(global_state_next.read()) ) {
      default:
        gs_ctrl4 = 0ULL;
        break;
      case 5ULL: 
        gs_ctrl4 = 1ULL;
        break;
      }
      break;
    }
  }
}
void GaussFilter::drive_i_rgb_busy(){
  i_rgb_busy = (sc_uint<1> ) (((/*imp*/sc_uint<1> ) 
               GaussFilter_gen_busy_r_4_28_out1.read().range(2,2)));
}
// resource: GaussFilter_gen_busy_r_4  instance: GaussFilter_gen_busy_r_4_28
void GaussFilter::GaussFilter_gen_busy_r_4_28_p8(){
  GaussFilter_gen_busy_r_4_28_out1 = (sc_uint<3> ) (( (sc_biguint<3> )(sc_bv<3>)
                                     ((sc_bv<1>)(
                                     GaussFilter_gen_busy_r_4_28_gnew_req.read()
                                     ), 
                                     (sc_bv<2>)(( (sc_biguint<2> )(sc_bv<2>)(
                                     (sc_bv<1>)(GaussFilter_gen_busy_r_4_28_gdiv
                                     .read()), 
                                     (sc_bv<1>)(GaussFilter_gen_busy_r_4_28_gen_busy_i_rgb_m_data_is_invalid_next
                                     .read())) ))) ));
}
// resource: GaussFilter_gen_busy_r_4  instance: GaussFilter_gen_busy_r_4_28
void GaussFilter::GaussFilter_gen_busy_r_4_28_p7(){
  GaussFilter_gen_busy_r_4_28_gen_busy_i_rgb_m_data_is_invalid_next = ~(sc_uint<1>)GaussFilter_gen_busy_r_4_28_gdiv
                                                                      .read();
}
// resource: GaussFilter_gen_busy_r_4  instance: GaussFilter_gen_busy_r_4_28
void GaussFilter::GaussFilter_gen_busy_r_4_28_p6(){
  GaussFilter_gen_busy_r_4_28_gdiv = (sc_uint<1> ) (i_rgb_vld.read() & !
                                     GaussFilter_gen_busy_r_4_28_gnew_req.read()
                                     );
}
// resource: GaussFilter_gen_busy_r_4  instance: GaussFilter_gen_busy_r_4_28
void GaussFilter::GaussFilter_gen_busy_r_4_28_p5(){
  GaussFilter_gen_busy_r_4_28_gnew_req = (sc_uint<1> ) (i_rgb_m_busy_req_0
                                         .read() & ( i_rgb_m_unvalidated_req
                                         .read() | (sc_uint<1> )i_rgb_vld.read()
                                          ));
}
// resource: regr_ss_1
void GaussFilter::drive_i_rgb_m_unvalidated_req(){
  if ( (i_rst.read() == 0ULL) ) {
    i_rgb_m_unvalidated_req = 1ULL;
  } else {
    i_rgb_m_unvalidated_req = (sc_uint<1> ) (GaussFilter_N_Muxb_1_2_16_4_4_out1
                              .read());
  }
}
// resource: GaussFilter_N_Muxb_1_2_16_4
void GaussFilter::GaussFilter_N_Muxb_1_2_16_4_4(){
  if ( i_rgb_m_busy_req_0.read() ) {
    GaussFilter_N_Muxb_1_2_16_4_4_out1 = (sc_uint<1> ) (i_rgb_m_unvalidated_req
                                         .read());
  } else {
    GaussFilter_N_Muxb_1_2_16_4_4_out1 = (sc_uint<1> ) (i_rgb_vld.read());
  }
}
void GaussFilter::drive_o_result_vld(){
  o_result_vld = (sc_uint<1> ) (GaussFilter_Or_1Ux1U_1U_4_2_out1.read());
}
// resource: GaussFilter_Or_1Ux1U_1U_4  instance: GaussFilter_Or_1Ux1U_1U_4_2
void GaussFilter::GaussFilter_Or_1Ux1U_1U_4_2(){
  GaussFilter_Or_1Ux1U_1U_4_2_out1 = (sc_uint<1> ) (o_result_m_unacked_req
                                     .read() | (sc_uint<1>)
                                     GaussFilter_Xor_1Ux1U_1U_1_1_out1.read());
}
// resource: regr_sc_1
void GaussFilter::drive_o_result_m_unacked_req(){
  if ( (i_rst.read() == 0ULL) ) {
    o_result_m_unacked_req = 0ULL;
  } else {
    o_result_m_unacked_req = (sc_uint<1> ) (GaussFilter_And_1Ux1U_1U_4_26_out1
                             .read());
  }
}
// resource: GaussFilter_And_1Ux1U_1U_4  instance: GaussFilter_And_1Ux1U_1U_4_26
void GaussFilter::GaussFilter_And_1Ux1U_1U_4_26(){
  GaussFilter_And_1Ux1U_1U_4_26_out1 = (sc_uint<1> ) (o_result_busy.read() & 
                                       o_result_vld.read());
}
// resource: GaussFilter_Xor_1Ux1U_1U_1  instance: GaussFilter_Xor_1Ux1U_1U_1_1
void GaussFilter::GaussFilter_Xor_1Ux1U_1U_1_1(){
  GaussFilter_Xor_1Ux1U_1U_1_1_out1 = (sc_uint<1> ) (o_result_m_req_m_trig_req
                                      .read() ^ o_result_m_req_m_prev_trig_req
                                      .read());
}
// resource: regr_sc_1
void GaussFilter::drive_o_result_m_req_m_prev_trig_req(){
  if ( (i_rst.read() == 0ULL) ) {
    o_result_m_req_m_prev_trig_req = 0ULL;
  } else {
    o_result_m_req_m_prev_trig_req = o_result_m_req_m_trig_req.read();
  }
}
// resource: GaussFilter_Not_1U_1U_1  instance: GaussFilter_Not_1U_1U_1_3
void GaussFilter::GaussFilter_Not_1U_1U_1_3(){
  GaussFilter_Not_1U_1U_1_3_out1 = !o_result_m_req_m_trig_req.read();
}
